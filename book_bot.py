import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# üîë –í–°–¢–ê–í–¨ –°–Æ–î–ê –°–í–û–ô –¢–û–ö–ï–ù
TOKEN = "7961914536:AAEel5xAHwY3vMghfw66jbYixbVyNVhw1qQ"

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# -------- FSM –°–û–°–¢–û–Ø–ù–ò–Ø --------
class BookOrder(StatesGroup):
    type = State()
    cover = State()
    pages = State()
    color = State()
    cover_type = State()
    quantity = State()

# -------- –ö–û–ú–ê–ù–î–ê /START --------
@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await message.answer(
        "üì¶ –ß—Ç–æ –±—É–¥–µ–º –ø–µ—á–∞—Ç–∞—Ç—å?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìñ –ö–Ω–∏–≥–∞")],
                [KeyboardButton(text="üìÑ –ë—É–∫–ª–µ—Ç"), KeyboardButton(text="üìá –í–∏–∑–∏—Ç–∫–∏")]
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(BookOrder.type)

# -------- –í–´–ë–û–† –¢–ò–ü–ê --------
@dp.message(BookOrder.type)
async def process_type(message: Message, state: FSMContext):
    await state.update_data(type=message.text)
    if message.text == "üìñ –ö–Ω–∏–≥–∞":
        await message.answer(
            "üìö –ö–∞–∫–æ–π –ø–µ—Ä–µ–ø–ª–µ—Ç?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–°–∫—Ä–µ–ø–∫–∞")],
                    [KeyboardButton(text="–ö–ª–µ–π")],
                    [KeyboardButton(text="–ö–ª–µ–π —Å —Ç–∏—Å–Ω–µ–Ω–∏–µ–º")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(BookOrder.cover)
    else:
        await message.answer("‚ùó –ü–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–∞—Å—á–µ—Ç –∫–Ω–∏–≥–∏.")
        await state.clear()

# -------- –ü–ï–†–ï–ü–õ–ï–¢ --------
@dp.message(BookOrder.cover)
async def process_cover(message: Message, state: FSMContext):
    await state.update_data(cover=message.text)
    await message.answer(
        "üìÑ –°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="50-100")],
                [KeyboardButton(text="100-200")],
                [KeyboardButton(text="200-300")]
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(BookOrder.pages)

# -------- –ö–û–õ-–í–û –°–¢–†–ê–ù–ò–¶ --------
@dp.message(BookOrder.pages)
async def process_pages(message: Message, state: FSMContext):
    await state.update_data(pages=message.text)
    await message.answer(
        "üé® –¶–≤–µ—Ç–Ω–æ—Å—Ç—å –∫–Ω–∏–≥–∏?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ß–µ—Ä–Ω–æ-–±–µ–ª–∞—è (—Ç–µ–∫—Å—Ç)")],
                [KeyboardButton(text="–ß–µ—Ä–Ω–æ-–±–µ–ª–∞—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏")],
                [KeyboardButton(text="–¶–≤–µ—Ç–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ 10% —Å—Ç—Ä–∞–Ω–∏—Ü")]
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(BookOrder.color)

# -------- –¶–í–ï–¢ --------
@dp.message(BookOrder.color)
async def process_color(message: Message, state: FSMContext):
    await state.update_data(color=message.text)
    await message.answer(
        "üßæ –ö–∞–∫–∞—è –æ–±–ª–æ–∂–∫–∞?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ú—è–≥–∫–∞—è —á/–±")],
                [KeyboardButton(text="–ú—è–≥–∫–∞—è —Ü–≤–µ—Ç–Ω–∞—è")],
                [KeyboardButton(text="–ñ–µ—Å—Ç–∫–∞—è —Ü–≤–µ—Ç–Ω–∞—è")]
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(BookOrder.cover_type)

# -------- –û–ë–õ–û–ñ–ö–ê --------
@dp.message(BookOrder.cover_type)
async def process_cover_type(message: Message, state: FSMContext):
    await state.update_data(cover_type=message.text)
    await message.answer(
        "üì¶ –ö–∞–∫–æ–π —Ç–∏—Ä–∞–∂?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="100"), KeyboardButton(text="200")],
                [KeyboardButton(text="300"), KeyboardButton(text="500")]
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(BookOrder.quantity)

# -------- –¢–ò–†–ê–ñ –ò –†–ê–°–ß–ï–¢ --------
@dp.message(BookOrder.quantity)
async def process_quantity(message: Message, state: FSMContext):
    await state.update_data(quantity=message.text)
    data = await state.get_data()

    # -------- –¶–ï–ù–û–í–´–ï –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–´ --------
    base_price = 50  # –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞ –∫–Ω–∏–≥—É –≤ —Ä—É–±–ª—è—Ö

    cover_type_coef = {
        "–°–∫—Ä–µ–ø–∫–∞": 1.0,
        "–ö–ª–µ–π": 1.2,
        "–ö–ª–µ–π —Å —Ç–∏—Å–Ω–µ–Ω–∏–µ–º": 1.5
    }

    pages_coef = {
        "50-100": 1.0,
        "100-200": 1.4,
        "200-300": 1.8
    }

    color_coef = {
        "–ß–µ—Ä–Ω–æ-–±–µ–ª–∞—è (—Ç–µ–∫—Å—Ç)": 1.0,
        "–ß–µ—Ä–Ω–æ-–±–µ–ª–∞—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏": 1.3,
        "–¶–≤–µ—Ç–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ 10% —Å—Ç—Ä–∞–Ω–∏—Ü": 1.6
    }

    cover_design_coef = {
        "–ú—è–≥–∫–∞—è —á/–±": 1.0,
        "–ú—è–≥–∫–∞—è —Ü–≤–µ—Ç–Ω–∞—è": 1.2,
        "–ñ–µ—Å—Ç–∫–∞—è —Ü–≤–µ—Ç–Ω–∞—è": 1.6
    }

    qty = int(data["quantity"])
    price_per_book = (
        base_price *
        cover_type_coef.get(data["cover"], 1.0) *
        pages_coef.get(data["pages"], 1.0) *
        color_coef.get(data["color"], 1.0) *
        cover_design_coef.get(data["cover_type"], 1.0)
    )

    total_price = int(price_per_book * qty)

    # -------- –°–û–û–ë–©–ï–ù–ò–ï –° –ò–¢–û–ì–û–ú --------
    await message.answer(
        f"üìò <b>–í–∞—à –≤—ã–±–æ—Ä:</b>\n"
        f"–¢–∏–ø: {data['type']}\n"
        f"–ü–µ—Ä–µ–ø–ª–µ—Ç: {data['cover']}\n"
        f"–°—Ç—Ä–∞–Ω–∏—Ü: {data['pages']}\n"
        f"–¶–≤–µ—Ç–Ω–æ—Å—Ç—å: {data['color']}\n"
        f"–û–±–ª–æ–∂–∫–∞: {data['cover_type']}\n"
        f"–¢–∏—Ä–∞–∂: {qty} —à—Ç.\n\n"
        f"üí∞ <b>–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±.</b>\n\n"
        f"‚ÑπÔ∏è –î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ä–∞—Å—á–µ—Ç")]
            ],
            resize_keyboard=True
        )
    )
    await state.clear()

# -------- –ü–û–í–¢–û–†–ò–¢–¨ –†–ê–°–ß–ï–¢ --------
@dp.message(F.text == "üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ä–∞—Å—á–µ—Ç")
async def repeat(message: Message, state: FSMContext):
    await start(message, state)

# -------- –ó–ê–ü–£–°–ö --------
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())